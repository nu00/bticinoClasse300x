#!/bin/sh
function kill_childs() {
	PID="$(ps -edf | grep sh | grep StartMqttSend | awk '{print $2}')"
	if [ -n "${PID}" ]; then
		kill $PID > /dev/null
		echo "Killed StartMqttSend process with PID $PID"
	fi

	PID="$(ps -edf | grep mosquitto_pub | grep $TOPIC_DUMP | awk '{print $2}')"
	if [ -n "${PID}" ]; then
		kill $PID > /dev/null
		echo "Killed mosquitto_pub process with PID $PID"
	fi

	PID="$(ps -edf | grep python | grep filter.py | awk '{print $2}')"
	if [ -n "${PID}" ]; then
		kill $PID > /dev/null
		echo "Killed filter.py process with PID $PID"
	fi

	PID="$(ps -edf | grep tcpdump | grep 30006 | awk '{print $2}')"
	if [ -n "${PID}" ]; then
		kill $PID > /dev/null
		echo "Killed tcpdump process with PID $PID"
	fi

	PID="$(ps -edf | grep sh | grep StartMqttReceive | awk '{print $2}')"
	if [ -n "${PID}" ]; then
		kill $PID > /dev/null
		echo "Killed StartMqttReceive process with PID $PID"
	fi

	PID="$(ps -edf | grep mosquitto_sub | grep $TOPIC_RX | awk '{print $2}')"
	if [ -n "${PID}" ]; then
		kill $PID > /dev/null
		echo "Killed stale mosquitto_sub process with PID $PID"
	fi
	PID="$(ps -edf | grep keypress.sh | awk '{print $2}')"
	if [ -n "${PID}" ]; then
		kill $PID > /dev/null
		echo "Killed stale keypress.sh process with PID $PID"
	fi
}

function exit_handler() {
	echo -e "Goodbye cruel world! x____x\n"
	kill_childs
	exit $?
}

trap exit_handler SIGINT SIGTERM

CFGFILE=/etc/tcpdump2mqtt/TcpDump2Mqtt.conf

# Check config file
if ! ([ -f $CFGFILE ] && [ -s $CFGFILE ]); then
	echo 'Configuration file missing or empty!'
	exit 1
fi

# Import configs
set -a
. $CFGFILE
set +a

# Check config params
# -z = variable is empty
# -n = variable is not empty
if ([ -z "${MQTT_HOST}" ] || [ -z "${MQTT_PORT}" ] || ([ -n "${MQTT_USER}" ] && [ -z "${MQTT_PASS}" ]) || \
    [ -z "${TOPIC_RX}" ] || [ -z "${TOPIC_DUMP}" ] || [ -z "${TOPIC_STARTD}" ] || [ -z "${TOPIC_LASTWILL}" ] || \
	([ -n "${MQTT_CAFILE}" ] && [ -z "${MQTT_CERTFILE}" ] && [ -z "${MQTT_KEYFILE}" ])); then
	echo 'Wrong configuration, please check config file!'
	exit 1
fi

# Determine and show default gateway
GWADDR="$(route -n | grep 'UG[ \t]' | awk '{print $2}')"
if [ -z "$GWADDR" ]; then
	echo "ERROR: Default gateway not found!"
	exit 1
fi
echo "Default gateway resolved as: $GWADDR"


# Displays destination MQTT broker
echo -n "MQTT host $MQTT_HOST"
if [ -n "${MQTT_USER}" ]; then
	echo -n " | MQTT authentication user and password enabled";
elif [ -n "${MQTT_CAFILE}" ]; then
	echo -n " | MQTT authentication using certificate enabled";
	echo -n " | MQTT CA file $MQTT_CAFILE";
	echo -n " | MQTT certificate file $MQTT_CERTFILE";
	echo -n " | MQTT key file $MQTT_KEYFILE";
fi
echo -e "\n"

# Kill any previous stale process
echo "Checking for stale processes..."
kill_childs
echo ""

# Main watchdog loop
while :
	do
		PING=`ping -s 1 -c 4 ${GWADDR} > /dev/null; echo $?`
		FILE=/tmp/flexisip_restarted

		if [ $PING -ne 0 ] || [ -f "$FILE" ]; then
			# Network is down or flexisip restarted

			if [ -f "$FILE" ]; then
				/bin/rm "$FILE"
				echo "Removed Flexisip restarted file"
			fi

			kill_childs
		else
			# Network is up

			# If MQTT sender is not running, start it
			if ! /usr/bin/pgrep -x tcpdump > /dev/null ; then
				echo -n "Starting MQTT sender..."
				/etc/tcpdump2mqtt/StartMqttSend &
				echo " done!"
				/bin/sleep 5

				echo -n "Publishing start date message..."
				if [ -n "${MQTT_USER}" ]; then
					echo -n " (auth with user and pass)..."
					/bin/date +"%Y-%m-%dT%H:%M:%S" | /usr/bin/mosquitto_pub -l -r -h ${MQTT_HOST} -p ${MQTT_PORT} -u ${MQTT_USER} -P ${MQTT_PASS} -t ${TOPIC_STARTD}
				elif [ -n "${MQTT_CAFILE}" ]; then
					echo -n " (auth using certificate)..."
					/bin/date +"%Y-%m-%dT%H:%M:%S" | /usr/bin/mosquitto_pub -l -r -h ${MQTT_HOST} -p ${MQTT_PORT} -t ${TOPIC_STARTD} --cafile ${MQTT_CAFILE} --cert ${MQTT_CERTFILE} --key ${MQTT_KEYFILE}
				else
					echo -n " (auth disabled)..."
					/bin/date +"%Y-%m-%dT%H:%M:%S" | /usr/bin/mosquitto_pub -l -r -h ${MQTT_HOST} -p ${MQTT_PORT} -t ${TOPIC_STARTD}
				fi
				echo -e " done!\n"
			fi

			# If MQTT receiver is not running, start it
			if ! /usr/bin/pgrep -x mosquitto_sub > /dev/null ; then
				echo -n "Starting MQTT receiver..."
				/etc/tcpdump2mqtt/StartMqttReceive &
				echo " done!"
				/bin/sleep 5

				echo -n "Publishing online status message..."
				if [ -n "${MQTT_USER}" ]; then
					echo -n " (auth with user and pass)..."
					/usr/bin/mosquitto_pub -r -h ${MQTT_HOST} -p ${MQTT_PORT} -u ${MQTT_USER} -P ${MQTT_PASS} -t ${TOPIC_LASTWILL} -m online
				elif [ -n "${MQTT_CAFILE}" ]; then
					echo -n " (auth using certificate)..."
					/usr/bin/mosquitto_pub -r -h ${MQTT_HOST} -p ${MQTT_PORT} -t ${TOPIC_LASTWILL} -m online --cafile ${MQTT_CAFILE} --cert ${MQTT_CERTFILE} --key ${MQTT_KEYFILE}
				else
					echo -n " (auth disabled)..."
					/usr/bin/mosquitto_pub -r -h ${MQTT_HOST} -p ${MQTT_PORT} -t ${TOPIC_LASTWILL} -m online
				fi
				echo -e " done!\n"
			fi

			# Key press detection
			/etc/tcpdump2mqtt/keypress.sh &
		fi

		/bin/sleep 30
		echo ".- .-.. .. -.-. ."
	done
